# Currently masked: "$ sudo systemctl mask haproxy"
# Unmask: "$ sudo systemctl unmask haproxy"
# Why? See ipfs://bafybeicn2ch2szaq3yma5257yl5gtkpsxuexcu5azp2o5u2ivsy2posifm - haproxy does not support different timeout durations for different servers in the same backend directive (with redispatch on). It can do
# "$ TZ=UTC wget https://<haproxy_ip>/test"
# which times-out at server1, making the retry successful at server2. But if that is viewed in a browser then a client will end on a 502 gateway timeout page. Related:
# https://megalodon.jp/2025-0117-1853-32/https://www.haproxy.com:443/documentation/haproxy-configuration-tutorials/service-reliability/retries/
# There might be a way to use a Lua script to do this, as suggested in the above CID and at the bottom of this text file.
global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
	option  redispatch
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend http_front
	bind *:81
	default_backend a

backend a
	balance roundrobin
	option redispatch
	timeout connect 60s #999
	timeout client 60s #999
	timeout server 60s #60
	server mpc 127.0.0.1:8080 check
	server hpc 10.0.0.229:443 check ssl verify none
	retries 999
	retry-on 503 504

# AI SLOP:
#backend backend_servers
#    option http-server-close
#    timeout connect 1s    # Connection timeout for the small storage server
#    timeout client 1s     # Client timeout for the small storage server
#    timeout server 999s  # Timeout for the large storage server
#
#    # Define the small storage server
#    server small_storage_server 192.168.1.10:80 check
#
#    # Define the large storage server
#    server large_storage_server 192.168.1.20:80 check backup
#
#    # Use the "http-request" directive to control the flow
#    http-request set-var(req.backend) req.backend
#    http-request use-service lua.retry_on_timeout if { var(req.backend) small_storage_server }
#
## Define a Lua service to handle retries
#frontend lua_front
#    bind *:8080
#    http-request use-service lua.retry_on_timeout
#
## Lua script to handle the retry logic
#global
#    lua-load /etc/haproxy/retry_on_timeout.lua
